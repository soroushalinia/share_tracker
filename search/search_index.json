{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"<p>Share tracker is an application for recording expenses for friendly gatherings and calculating each person's share. This program determines the amount of debt and credit for each person registered in the program, and all payment details are recorded within the application.</p>"},{"location":"#features","title":"Features","text":"<ul> <li> <p>User Management: Maintain a record of individuals attending gatherings, including their names, usernames, passwords, email addresses, profile images, and card numbers.</p> </li> <li> <p>Meeting Management: Manage gatherings/meetings with specific dates and descriptions, tracking the participants and creator of each meeting. Each meeting will have unique invite links that users can use to send requests for participation. Users will be granted access once their requests are accepted by the creator.</p> </li> <li> <p>Item Catalog Management: Manage a catalog of items available for order during gatherings, including their names and pricing information.</p> </li> <li> <p>Order Management: Record orders placed during meetings, capturing details such as the items ordered, quantities, and the individuals involved.</p> </li> <li> <p>Payment Processing: Handle payment transactions, documenting who made the payment, the total amount, and the items associated with each payment.</p> </li> <li> <p>Transaction Logging: Record all financial transactions, including verification statuses by both the user and the owner, which helps maintain consensus among all parties, along with the total amount involved.</p> </li> <li> <p>Bill Generation: Create detailed bills that summarize all transactions, orders, and meetings, indicating whether each bill has been paid and detailing the overall amount due.</p> </li> </ul>"},{"location":"#tech-stack","title":"Tech stack","text":"<p>This application uses <code>FastAPI</code> + <code>MongoDB</code> for backend. Frontend is not planned at the moment.</p> <ul> <li>\u26a1 FastAPI for a high-performance Python backend API<ul> <li>\ud83d\udcbe MongoDB for scalable NoSQL database storage</li> <li>\ud83d\udd0d Pydanic for robust data validation and parsing</li> <li>\u231b Celery for distributed background task processing</li> </ul> </li> <li>\ud83d\udc0b Docker compose for consistent development and production environments</li> <li>\u2705 Pytest  for comprehensive testing coverage</li> <li>\u2699\ufe0f Poetry for efficient dependency management</li> <li>\ud83e\uddd1\u200d\ud83d\udcbb Pylint and Mypy for linting, static code analysis and type checking</li> <li>\ud83e\uddf9 Ruff for fast and flexible code formatting</li> <li>\ud83c\udfed CI/CD pipeline built with GitHub Actions for automated testing, deployment, and integration</li> <li>\ud83d\udd12 OAuth2 + JWT secure user authentication and authorization</li> <li>\ud83d\udee1\ufe0f Enhanced Security Standards including rate limiting, secure headers (e.g., CORS, HSTS), and protection against common vulnerabilities (e.g., XSS, CSRF)</li> <li>\ud83d\udce6 Testcontainers for lightweight, disposable test environments</li> <li>\ud83d\udce8 Email-based user authentication with token-based verification and password reset flows</li> </ul>"},{"location":"schema/","title":"Schematic","text":"<p>This pages provides database schematic for application</p> <pre><code>class User(Document):\n  name: str\n  username: str\n  password: str\n  email: EmailStr\n  image: Optional[str] = Field(default=None)\n  card_number: Optional[str] = Field(default=None)\n\n\nclass Request(BaseModel):\n  username: str\n  status: Literal[\"pending\", \"accepted\", \"declined\"]\n\n\nclass Meeting(Document):\n  date: Annotated[\n    Optional[datetime],\n    Field(default_factory=lambda: datetime.now(timezone.utc)),\n  ]\n  description: str\n  members: Annotated[List[Link[User]], Field(default_factory=list)]\n  creator: Link[User]\n  requests: Annotated[List[Request], Field(default_factory=list)]\n\n\nclass Item(Document):\n  name: str\n  price: Optional[int] = Field(default=None)\n  meeting: Link[Meeting]\n\n\nclass Order(Document):\n  item: Item\n  quantity: int\n  users: Annotated[List[Link[User]], Field(default_factory=list)]\n  meeting: Link[Meeting]\n\n\nclass Payment(Document):\n  payed_by: Link[User]\n  amount: int\n  items: Annotated[List[Link[Item]], Field(default_factory=list)]\n  meeting: Link[Meeting]\n\n\nclass Transaction(Document):\n  user: User\n  verified_by_owner: bool\n  verified_by_user: bool\n  amount: int\n  received: bool\n  meeting: Link[Meeting]\n\n\nclass Bill(Document):\n  user: Link[User]\n  amount: int\n  negative: bool\n  transactions: Annotated[List[Link[Transaction]], Field(default_factory=list)]\n  meeting: Link[Meeting]\n</code></pre>"}]}